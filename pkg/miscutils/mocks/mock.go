// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/miscutils/utils.go
//
// Generated by this command:
//
//	mockgen --source pkg/miscutils/utils.go --destination pkg/miscutils/mocks/mock.go
//

// Package mock_miscutils is a generated GoMock package.
package mock_miscutils

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMiscUtils is a mock of MiscUtils interface.
type MockMiscUtils struct {
	ctrl     *gomock.Controller
	recorder *MockMiscUtilsMockRecorder
	isgomock struct{}
}

// MockMiscUtilsMockRecorder is the mock recorder for MockMiscUtils.
type MockMiscUtilsMockRecorder struct {
	mock *MockMiscUtils
}

// NewMockMiscUtils creates a new mock instance.
func NewMockMiscUtils(ctrl *gomock.Controller) *MockMiscUtils {
	mock := &MockMiscUtils{ctrl: ctrl}
	mock.recorder = &MockMiscUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiscUtils) EXPECT() *MockMiscUtilsMockRecorder {
	return m.recorder
}

// StringToFile mocks base method.
func (m *MockMiscUtils) StringToFile(f *os.File, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringToFile", f, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// StringToFile indicates an expected call of StringToFile.
func (mr *MockMiscUtilsMockRecorder) StringToFile(f, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringToFile", reflect.TypeOf((*MockMiscUtils)(nil).StringToFile), f, text)
}
